{"ast":null,"code":"'use strict';\n\nvar response = require('xhr-response'),\n  statuscode = require('xhr-status'),\n  one = require('one-time'),\n  fail = require('failure');\n\n/**\n * Simple nope function that assigned to XHR requests as part of a clean-up\n * operation.\n *\n * @api private\n */\nfunction nope() {}\n\n/**\n * Attach various of event listeners to a given XHR request.\n *\n * @param {XHR} xhr A XHR request that requires listening.\n * @param {EventEmitter} ee EventEmitter that receives events.\n * @api public\n */\nfunction loads(xhr, ee) {\n  var onreadystatechange, onprogress, ontimeout, onabort, onerror, onload, timer;\n\n  /**\n   * Error listener.\n   *\n   * @param {Event} evt Triggered error event.\n   * @api private\n   */\n  onerror = xhr.onerror = one(function onerror(evt) {\n    var status = statuscode(xhr),\n      err = fail(new Error('Network request failed'), status);\n    ee.emit('error', err);\n    ee.emit('end', err, status);\n  });\n\n  /**\n   * Fix for FireFox's odd abort handling behaviour. When you press ESC on an\n   * active request it triggers `error` instead of abort. The same is called\n   * when an HTTP request is canceled onunload.\n   *\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n   * @see https://code.google.com/p/chromium/issues/detail?id=153570\n   * @param {Event} evt Triggerd abort event\n   * @api private\n   */\n  onabort = xhr.onabort = function onabort(evt) {\n    onerror(evt);\n  };\n\n  /**\n   * ReadyStateChange listener.\n   *\n   * @param {Event} evt Triggered readyState change event.\n   * @api private\n   */\n  onreadystatechange = xhr.onreadystatechange = function change(evt) {\n    var target = evt.target;\n    if (4 === target.readyState) return onload(evt);\n  };\n\n  /**\n   * The connection has timed out.\n   *\n   * @api private\n   */\n  ontimeout = xhr.ontimeout = one(function timeout(evt) {\n    ee.emit('timeout', evt);\n\n    //\n    // Make sure that the request is aborted when there is a timeout. If this\n    // doesn't trigger an error, the next call will.\n    //\n    if (xhr.abort) xhr.abort();\n    onerror(evt);\n  });\n\n  //\n  // Fallback for implementations that did not ship with timer support yet.\n  // Microsoft's XDomainRequest was one of the first to ship with `.timeout`\n  // support so we all XHR implementations before that require a polyfill.\n  //\n  // @see https://bugzilla.mozilla.org/show_bug.cgi?id=525816\n  //\n  if (xhr.timeout) timer = setTimeout(ontimeout, +xhr.timeout);\n\n  /**\n   * IE needs have it's `onprogress` function assigned to a unique function. So,\n   * no touchy touchy here!\n   *\n   * @param {Event} evt Triggered progress event.\n   * @api private\n   */\n  onprogress = xhr.onprogress = function progress(evt) {\n    var status = statuscode(xhr),\n      data;\n    ee.emit('progress', evt, status);\n    if (xhr.readyState >= 3 && status.code === 200 && (data = response(xhr))) {\n      ee.emit('stream', data, status);\n    }\n  };\n\n  /**\n   * Handle load events an potential data events for when there was no streaming\n   * data.\n   *\n   * @param {Event} evt Triggered load event.\n   * @api private\n   */\n  onload = xhr.onload = one(function load(evt) {\n    var status = statuscode(xhr),\n      data = response(xhr);\n    if (status.code < 100 || status.code > 599) return onerror(evt);\n\n    //\n    // There is a bug in FireFox's XHR2 implementation where status code 204\n    // triggers a \"no element found\" error and bad data. So to be save here,\n    // we're just **never** going to emit a `stream` event as for 204's there\n    // shouldn't be any content.\n    //\n    if (data && status.code !== 204) {\n      ee.emit('stream', data, status);\n    }\n    ee.emit('end', undefined, status);\n  });\n\n  //\n  // Properly clean up the previously assigned event listeners and timers to\n  // prevent potential data leaks and unwanted `stream` events.\n  //\n  ee.once('end', function cleanup() {\n    xhr.onreadystatechange = onreadystatechange = xhr.onprogress = onprogress = xhr.ontimeout = ontimeout = xhr.onerror = onerror = xhr.onabort = onabort = xhr.onload = onload = nope;\n    if (timer) clearTimeout(timer);\n  });\n  return xhr;\n}\n\n//\n// Expose all the things.\n//\nmodule.exports = loads;","map":{"version":3,"names":["response","require","statuscode","one","fail","nope","loads","xhr","ee","onreadystatechange","onprogress","ontimeout","onabort","onerror","onload","timer","evt","status","err","Error","emit","change","target","readyState","timeout","abort","setTimeout","progress","data","code","load","undefined","once","cleanup","clearTimeout","module","exports"],"sources":["C:/Users/Le Roy/node_modules/loads/index.js"],"sourcesContent":["'use strict';\n\nvar response = require('xhr-response')\n  , statuscode = require('xhr-status')\n  , one = require('one-time')\n  , fail = require('failure');\n\n/**\n * Simple nope function that assigned to XHR requests as part of a clean-up\n * operation.\n *\n * @api private\n */\nfunction nope() {}\n\n/**\n * Attach various of event listeners to a given XHR request.\n *\n * @param {XHR} xhr A XHR request that requires listening.\n * @param {EventEmitter} ee EventEmitter that receives events.\n * @api public\n */\nfunction loads(xhr, ee) {\n  var onreadystatechange\n    , onprogress\n    , ontimeout\n    , onabort\n    , onerror\n    , onload\n    , timer;\n\n  /**\n   * Error listener.\n   *\n   * @param {Event} evt Triggered error event.\n   * @api private\n   */\n  onerror = xhr.onerror = one(function onerror(evt) {\n    var status = statuscode(xhr)\n      , err = fail(new Error('Network request failed'), status);\n\n    ee.emit('error', err);\n    ee.emit('end', err, status);\n  });\n\n  /**\n   * Fix for FireFox's odd abort handling behaviour. When you press ESC on an\n   * active request it triggers `error` instead of abort. The same is called\n   * when an HTTP request is canceled onunload.\n   *\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=768596\n   * @see https://bugzilla.mozilla.org/show_bug.cgi?id=880200\n   * @see https://code.google.com/p/chromium/issues/detail?id=153570\n   * @param {Event} evt Triggerd abort event\n   * @api private\n   */\n  onabort = xhr.onabort = function onabort(evt) {\n    onerror(evt);\n  };\n\n  /**\n   * ReadyStateChange listener.\n   *\n   * @param {Event} evt Triggered readyState change event.\n   * @api private\n   */\n  onreadystatechange = xhr.onreadystatechange = function change(evt) {\n    var target = evt.target;\n\n    if (4 === target.readyState) return onload(evt);\n  };\n\n  /**\n   * The connection has timed out.\n   *\n   * @api private\n   */\n  ontimeout = xhr.ontimeout = one(function timeout(evt) {\n    ee.emit('timeout', evt);\n\n    //\n    // Make sure that the request is aborted when there is a timeout. If this\n    // doesn't trigger an error, the next call will.\n    //\n    if (xhr.abort) xhr.abort();\n    onerror(evt);\n  });\n\n  //\n  // Fallback for implementations that did not ship with timer support yet.\n  // Microsoft's XDomainRequest was one of the first to ship with `.timeout`\n  // support so we all XHR implementations before that require a polyfill.\n  //\n  // @see https://bugzilla.mozilla.org/show_bug.cgi?id=525816\n  //\n  if (xhr.timeout) timer = setTimeout(ontimeout, +xhr.timeout);\n\n  /**\n   * IE needs have it's `onprogress` function assigned to a unique function. So,\n   * no touchy touchy here!\n   *\n   * @param {Event} evt Triggered progress event.\n   * @api private\n   */\n  onprogress = xhr.onprogress = function progress(evt) {\n    var status = statuscode(xhr)\n      , data;\n\n    ee.emit('progress', evt, status);\n\n    if (xhr.readyState >= 3 && status.code === 200 && (data = response(xhr))) {\n      ee.emit('stream', data, status);\n    }\n  };\n\n  /**\n   * Handle load events an potential data events for when there was no streaming\n   * data.\n   *\n   * @param {Event} evt Triggered load event.\n   * @api private\n   */\n  onload = xhr.onload = one(function load(evt) {\n    var status = statuscode(xhr)\n      , data = response(xhr);\n\n    if (status.code < 100 || status.code > 599) return onerror(evt);\n\n    //\n    // There is a bug in FireFox's XHR2 implementation where status code 204\n    // triggers a \"no element found\" error and bad data. So to be save here,\n    // we're just **never** going to emit a `stream` event as for 204's there\n    // shouldn't be any content.\n    //\n    if (data && status.code !== 204) {\n      ee.emit('stream', data, status);\n    }\n\n    ee.emit('end', undefined, status);\n  });\n\n  //\n  // Properly clean up the previously assigned event listeners and timers to\n  // prevent potential data leaks and unwanted `stream` events.\n  //\n  ee.once('end', function cleanup() {\n    xhr.onreadystatechange = onreadystatechange =\n    xhr.onprogress = onprogress =\n    xhr.ontimeout = ontimeout =\n    xhr.onerror = onerror =\n    xhr.onabort = onabort =\n    xhr.onload = onload = nope;\n\n    if (timer) clearTimeout(timer);\n  });\n\n  return xhr;\n}\n\n//\n// Expose all the things.\n//\nmodule.exports = loads;\n"],"mappings":"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"},"metadata":{},"sourceType":"script","externalDependencies":[]}