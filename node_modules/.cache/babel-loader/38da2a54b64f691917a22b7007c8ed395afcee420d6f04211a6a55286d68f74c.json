{"ast":null,"code":"'use strict';\n\nvar Requested = require('./requested'),\n  listeners = require('loads'),\n  send = require('xhr-send'),\n  hang = require('hang'),\n  AXO = require('axo'),\n  XMLHttpRequest = require('node-http-xhr');\n\n/**\n * RequestS(tream).\n *\n * Options:\n *\n * - streaming: Should the request be streaming.\n * - method: Which HTTP method should be used.\n * - headers: Additional request headers.\n * - mode: Enable CORS mode.\n * - body: The payload for the request.\n *\n * @constructor\n * @param {String} url The URL we want to request.\n * @param {Object} options Various of request options.\n * @api public\n */\nvar Requests = module.exports = Requested.extend({\n  constructor: function bobthebuilder(url, options) {\n    if (!(this instanceof Requests)) return new Requests(url, options);\n    Requested.apply(this, arguments);\n  },\n  /**\n   * The offset of data that we've already previously read\n   *\n   * @type {Number}\n   * @private\n   */\n  offset: 0,\n  /**\n   * The requests instance has been fully initialized.\n   *\n   * @param {String} url The URL we need to connect to.\n   * @api private\n   */\n  initialize: function initialize(url) {\n    this.socket = Requests[Requests.method](this);\n\n    //\n    // Open the socket BEFORE adding any properties to the instance as this might\n    // trigger a thrown `InvalidStateError: An attempt was made to use an object\n    // that is not, or is no longer, usable` error in FireFox:\n    //\n    // @see https://bugzilla.mozilla.org/show_bug.cgi?id=707484\n    //\n    this.socket.open(this.method.toUpperCase(), url, true);\n\n    //\n    // Register this as an active HTTP request.\n    //\n    Requests.active[this.id] = this;\n  },\n  /**\n   * Initialize and start requesting the supplied resource.\n   *\n   * @param {Object} options Passed in defaults.\n   * @api private\n   */\n  open: function open() {\n    var what,\n      slice = true,\n      requests = this,\n      socket = requests.socket;\n    requests.on('stream', function stream(data) {\n      if (!slice) {\n        return requests.emit('data', data);\n      }\n\n      //\n      // Please note that we need to use a method here that works on both string\n      // as well as ArrayBuffer's as we have no certainty that we're receiving\n      // text.\n      //\n      var chunk = data.slice(requests.offset);\n      requests.offset = data.length;\n      requests.emit('data', chunk);\n    });\n    requests.on('end', function cleanup() {\n      delete Requests.active[requests.id];\n    });\n    if (this.timeout) {\n      socket.timeout = +this.timeout;\n    }\n    if ('cors' === this.mode.toLowerCase() && 'withCredentials' in socket) {\n      socket.withCredentials = true;\n    }\n\n    //\n    // ActiveXObject will throw an `Type Mismatch` exception when setting the to\n    // an null-value and to be consistent with all XHR implementations we're going\n    // to cast the value to a string.\n    //\n    // While we don't technically support the XDomainRequest of IE, we do want to\n    // double check that the setRequestHeader is available before adding headers.\n    //\n    // Chrome has a bug where it will actually append values to the header instead\n    // of overriding it. So if you do a double setRequestHeader(Content-Type) with\n    // text/plain and with text/plain again, it will end up as `text/plain,\n    // text/plain` as header value. This is why use a headers object as it\n    // already eliminates duplicate headers.\n    //\n    for (what in this.headers) {\n      if (this.headers[what] !== undefined && this.socket.setRequestHeader) {\n        this.socket.setRequestHeader(what, this.headers[what] + '');\n      }\n    }\n\n    //\n    // Set the correct responseType method.\n    //\n    if (requests.streaming) {\n      if (!this.body || 'string' === typeof this.body) {\n        if ('multipart' in socket) {\n          socket.multipart = true;\n          slice = false;\n        } else if (Requests.type.mozchunkedtext) {\n          socket.responseType = 'moz-chunked-text';\n          slice = false;\n        }\n      } else {\n        if (Requests.type.mozchunkedarraybuffer) {\n          socket.responseType = 'moz-chunked-arraybuffer';\n        } else if (Requests.type.msstream) {\n          socket.responseType = 'ms-stream';\n        }\n      }\n    }\n    listeners(socket, requests, requests.streaming);\n    requests.emit('before', socket);\n    send(socket, this.body, hang(function send(err) {\n      if (err) {\n        requests.emit('error', err);\n        requests.emit('end', err);\n      }\n      requests.emit('send');\n    }));\n  },\n  /**\n   * Completely destroy the running XHR and release of the internal references.\n   *\n   * @returns {Boolean} Successful destruction\n   * @api public\n   */\n  destroy: function destroy() {\n    if (!this.socket) return false;\n    this.emit('destroy');\n    this.socket.abort();\n    this.removeAllListeners();\n    this.headers = {};\n    this.socket = null;\n    this.body = null;\n    delete Requests.active[this.id];\n    return true;\n  }\n});\n\n/**\n * Create a new XMLHttpRequest.\n *\n * @returns {XMLHttpRequest}\n * @api private\n */\nRequests.XHR = function create() {\n  try {\n    return new XMLHttpRequest();\n  } catch (e) {}\n};\n\n/**\n * Create a new ActiveXObject which can be used for XHR.\n *\n * @returns {ActiveXObject}\n * @api private\n */\nRequests.AXO = function create() {\n  var ids = ['MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.3.0', 'Microsoft.XMLHTTP'],\n    id;\n  while (ids.length) {\n    id = ids.shift();\n    try {\n      return new AXO(id);\n    } catch (e) {}\n  }\n};\n\n/**\n * Requests that are currently running.\n *\n * @type {Object}\n * @private\n */\nRequests.active = {};\n\n/**\n * The type of technology we are using to establish a working Ajax connection.\n * This can either be:\n *\n * - XHR: XMLHttpRequest\n * - AXO: ActiveXObject\n *\n * This is also used as internal optimization so we can easily get the correct\n * constructor as we've already feature detected it.\n *\n * @type {String}\n * @public\n */\nRequests.method = !!Requests.XHR() ? 'XHR' : !!Requests.AXO() ? 'AXO' : '';\n\n/**\n * Boolean indicating\n *\n * @type {Boolean}\n * @public\n */\nRequests.supported = !!Requests.method;\n\n/**\n * The different type of `responseType` parsers that are supported in this XHR\n * implementation.\n *\n * @type {Object}\n * @public\n */\nRequests.type = 'XHR' === Requests.method ? function detect() {\n  var types = 'arraybuffer,blob,document,json,text,moz-blob,moz-chunked-text,moz-chunked-arraybuffer,ms-stream'.split(','),\n    supported = {},\n    type,\n    xhr,\n    prop;\n  while (types.length) {\n    type = types.pop();\n    prop = type.replace(/-/g, '');\n    xhr = Requests.XHR();\n\n    //\n    // Older versions of Firefox/IE11 will throw an error because previous\n    // version of the specification do not support setting `responseType`\n    // before the request is opened. Thus, we open the request here.\n    //\n    // Note that `open()` does not actually open any connections; it just\n    // initializes the request object.\n    //\n    try {\n      // Try opening a request to current page.\n      xhr.open('get', '/', true);\n    } catch (e) {\n      // In JSDOM the above will fail because it only supports full URLs, so\n      // try opening a request to localhost.\n      try {\n        xhr.open('get', 'http://localhost/', true);\n      } catch (err) {\n        supported[prop] = false;\n        continue;\n      }\n    }\n    try {\n      xhr.responseType = type;\n      supported[prop] = 'response' in xhr && xhr.responseType === type;\n    } catch (e) {\n      supported[prop] = false;\n    }\n    xhr = null;\n  }\n  return supported;\n}() : {};\n\n/**\n * Do we support streaming response parsing.\n *\n * @type {Boolean}\n * @private\n */\nRequests.streaming = 'XHR' === Requests.method && ('multipart' in XMLHttpRequest.prototype || Requests.type.mozchunkedarraybuffer || Requests.type.mozchunkedtext || Requests.type.msstream || Requests.type.mozblob);\n\n//\n// IE has a bug which causes IE10 to freeze when close WebPage during an XHR\n// request: https://support.microsoft.com/kb/2856746\n//\n// The solution is to completely clean up all active running requests.\n//\nif (global.attachEvent) global.attachEvent('onunload', function reap() {\n  for (var id in Requests.active) {\n    Requests.active[id].destroy();\n  }\n});\n\n//\n// Expose the Requests library.\n//\nmodule.exports = Requests;","map":{"version":3,"names":["Requested","require","listeners","send","hang","AXO","XMLHttpRequest","Requests","module","exports","extend","constructor","bobthebuilder","url","options","apply","arguments","offset","initialize","socket","method","open","toUpperCase","active","id","what","slice","requests","on","stream","data","emit","chunk","length","cleanup","timeout","mode","toLowerCase","withCredentials","headers","undefined","setRequestHeader","streaming","body","multipart","type","mozchunkedtext","responseType","mozchunkedarraybuffer","msstream","err","destroy","abort","removeAllListeners","XHR","create","e","ids","shift","supported","detect","types","split","xhr","prop","pop","replace","prototype","mozblob","global","attachEvent","reap"],"sources":["C:/Users/Le Roy/node_modules/requests/index.js"],"sourcesContent":["'use strict';\n\nvar Requested = require('./requested')\n  , listeners = require('loads')\n  , send = require('xhr-send')\n  , hang = require('hang')\n  , AXO = require('axo')\n  , XMLHttpRequest = require('node-http-xhr');\n\n/**\n * RequestS(tream).\n *\n * Options:\n *\n * - streaming: Should the request be streaming.\n * - method: Which HTTP method should be used.\n * - headers: Additional request headers.\n * - mode: Enable CORS mode.\n * - body: The payload for the request.\n *\n * @constructor\n * @param {String} url The URL we want to request.\n * @param {Object} options Various of request options.\n * @api public\n */\nvar Requests = module.exports = Requested.extend({\n  constructor: function bobthebuilder(url, options) {\n    if (!(this instanceof Requests)) return new Requests(url, options);\n\n    Requested.apply(this, arguments);\n  },\n\n  /**\n   * The offset of data that we've already previously read\n   *\n   * @type {Number}\n   * @private\n   */\n  offset: 0,\n\n  /**\n   * The requests instance has been fully initialized.\n   *\n   * @param {String} url The URL we need to connect to.\n   * @api private\n   */\n  initialize: function initialize(url) {\n    this.socket = Requests[Requests.method](this);\n\n    //\n    // Open the socket BEFORE adding any properties to the instance as this might\n    // trigger a thrown `InvalidStateError: An attempt was made to use an object\n    // that is not, or is no longer, usable` error in FireFox:\n    //\n    // @see https://bugzilla.mozilla.org/show_bug.cgi?id=707484\n    //\n    this.socket.open(this.method.toUpperCase(), url, true);\n\n    //\n    // Register this as an active HTTP request.\n    //\n    Requests.active[this.id] = this;\n  },\n\n  /**\n   * Initialize and start requesting the supplied resource.\n   *\n   * @param {Object} options Passed in defaults.\n   * @api private\n   */\n  open: function open() {\n    var what\n      , slice = true\n      , requests = this\n      , socket = requests.socket;\n\n    requests.on('stream', function stream(data) {\n      if (!slice) {\n        return requests.emit('data', data);\n      }\n\n      //\n      // Please note that we need to use a method here that works on both string\n      // as well as ArrayBuffer's as we have no certainty that we're receiving\n      // text.\n      //\n      var chunk = data.slice(requests.offset);\n      requests.offset = data.length;\n\n      requests.emit('data', chunk);\n    });\n\n    requests.on('end', function cleanup() {\n      delete Requests.active[requests.id];\n    });\n\n    if (this.timeout) {\n      socket.timeout = +this.timeout;\n    }\n\n    if ('cors' === this.mode.toLowerCase() && 'withCredentials' in socket) {\n      socket.withCredentials = true;\n    }\n\n    //\n    // ActiveXObject will throw an `Type Mismatch` exception when setting the to\n    // an null-value and to be consistent with all XHR implementations we're going\n    // to cast the value to a string.\n    //\n    // While we don't technically support the XDomainRequest of IE, we do want to\n    // double check that the setRequestHeader is available before adding headers.\n    //\n    // Chrome has a bug where it will actually append values to the header instead\n    // of overriding it. So if you do a double setRequestHeader(Content-Type) with\n    // text/plain and with text/plain again, it will end up as `text/plain,\n    // text/plain` as header value. This is why use a headers object as it\n    // already eliminates duplicate headers.\n    //\n    for (what in this.headers) {\n      if (this.headers[what] !== undefined && this.socket.setRequestHeader) {\n        this.socket.setRequestHeader(what, this.headers[what] +'');\n      }\n    }\n\n    //\n    // Set the correct responseType method.\n    //\n    if (requests.streaming) {\n      if (!this.body || 'string' === typeof this.body) {\n        if ('multipart' in socket) {\n          socket.multipart = true;\n          slice = false;\n        } else if (Requests.type.mozchunkedtext) {\n          socket.responseType = 'moz-chunked-text';\n          slice = false;\n        }\n      } else {\n        if (Requests.type.mozchunkedarraybuffer) {\n          socket.responseType = 'moz-chunked-arraybuffer';\n        } else if (Requests.type.msstream) {\n          socket.responseType = 'ms-stream';\n        }\n      }\n    }\n\n    listeners(socket, requests, requests.streaming);\n    requests.emit('before', socket);\n\n    send(socket, this.body, hang(function send(err) {\n      if (err) {\n        requests.emit('error', err);\n        requests.emit('end', err);\n      }\n\n      requests.emit('send');\n    }));\n  },\n\n  /**\n   * Completely destroy the running XHR and release of the internal references.\n   *\n   * @returns {Boolean} Successful destruction\n   * @api public\n   */\n  destroy: function destroy() {\n    if (!this.socket) return false;\n\n    this.emit('destroy');\n\n    this.socket.abort();\n    this.removeAllListeners();\n\n    this.headers = {};\n    this.socket = null;\n    this.body = null;\n\n    delete Requests.active[this.id];\n\n    return true;\n  }\n});\n\n/**\n * Create a new XMLHttpRequest.\n *\n * @returns {XMLHttpRequest}\n * @api private\n */\nRequests.XHR = function create() {\n  try { return new XMLHttpRequest(); }\n  catch (e) {}\n};\n\n/**\n * Create a new ActiveXObject which can be used for XHR.\n *\n * @returns {ActiveXObject}\n * @api private\n */\nRequests.AXO = function create() {\n  var ids = ['MSXML2.XMLHTTP.6.0', 'MSXML2.XMLHTTP.3.0', 'Microsoft.XMLHTTP']\n    , id;\n\n  while (ids.length) {\n    id = ids.shift();\n\n    try { return new AXO(id); }\n    catch (e) {}\n  }\n};\n\n/**\n * Requests that are currently running.\n *\n * @type {Object}\n * @private\n */\nRequests.active = {};\n\n/**\n * The type of technology we are using to establish a working Ajax connection.\n * This can either be:\n *\n * - XHR: XMLHttpRequest\n * - AXO: ActiveXObject\n *\n * This is also used as internal optimization so we can easily get the correct\n * constructor as we've already feature detected it.\n *\n * @type {String}\n * @public\n */\nRequests.method = !!Requests.XHR() ? 'XHR' : (!!Requests.AXO() ? 'AXO' : '');\n\n/**\n * Boolean indicating\n *\n * @type {Boolean}\n * @public\n */\nRequests.supported = !!Requests.method;\n\n/**\n * The different type of `responseType` parsers that are supported in this XHR\n * implementation.\n *\n * @type {Object}\n * @public\n */\nRequests.type = 'XHR' === Requests.method ? (function detect() {\n  var types = 'arraybuffer,blob,document,json,text,moz-blob,moz-chunked-text,moz-chunked-arraybuffer,ms-stream'.split(',')\n    , supported = {}\n    , type, xhr, prop;\n\n  while (types.length) {\n    type = types.pop();\n    prop = type.replace(/-/g, '');\n    xhr = Requests.XHR();\n\n    //\n    // Older versions of Firefox/IE11 will throw an error because previous\n    // version of the specification do not support setting `responseType`\n    // before the request is opened. Thus, we open the request here.\n    //\n    // Note that `open()` does not actually open any connections; it just\n    // initializes the request object.\n    //\n    try {\n      // Try opening a request to current page.\n      xhr.open('get', '/', true);\n    } catch (e) {\n      // In JSDOM the above will fail because it only supports full URLs, so\n      // try opening a request to localhost.\n      try {\n        xhr.open('get', 'http://localhost/', true);\n      } catch (err) {\n        supported[prop] = false;\n        continue;\n      }\n    }\n\n    try {\n      xhr.responseType = type;\n      supported[prop] = 'response' in xhr && xhr.responseType === type;\n    } catch (e) {\n      supported[prop] = false;\n    }\n\n    xhr = null;\n  }\n\n  return supported;\n}()) : {};\n\n/**\n * Do we support streaming response parsing.\n *\n * @type {Boolean}\n * @private\n */\nRequests.streaming = 'XHR' === Requests.method && (\n     'multipart' in XMLHttpRequest.prototype\n  || Requests.type.mozchunkedarraybuffer\n  || Requests.type.mozchunkedtext\n  || Requests.type.msstream\n  || Requests.type.mozblob\n);\n\n//\n// IE has a bug which causes IE10 to freeze when close WebPage during an XHR\n// request: https://support.microsoft.com/kb/2856746\n//\n// The solution is to completely clean up all active running requests.\n//\nif (global.attachEvent) global.attachEvent('onunload', function reap() {\n  for (var id in Requests.active) {\n    Requests.active[id].destroy();\n  }\n});\n\n//\n// Expose the Requests library.\n//\nmodule.exports = Requests;\n"],"mappings":"AAAA,YAAY;;AAEZ,IAAIA,SAAS,GAAGC,OAAO,CAAC,aAAa,CAAC;EAClCC,SAAS,GAAGD,OAAO,CAAC,OAAO,CAAC;EAC5BE,IAAI,GAAGF,OAAO,CAAC,UAAU,CAAC;EAC1BG,IAAI,GAAGH,OAAO,CAAC,MAAM,CAAC;EACtBI,GAAG,GAAGJ,OAAO,CAAC,KAAK,CAAC;EACpBK,cAAc,GAAGL,OAAO,CAAC,eAAe,CAAC;;AAE7C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIM,QAAQ,GAAGC,MAAM,CAACC,OAAO,GAAGT,SAAS,CAACU,MAAM,CAAC;EAC/CC,WAAW,EAAE,SAASC,aAAaA,CAACC,GAAG,EAAEC,OAAO,EAAE;IAChD,IAAI,EAAE,IAAI,YAAYP,QAAQ,CAAC,EAAE,OAAO,IAAIA,QAAQ,CAACM,GAAG,EAAEC,OAAO,CAAC;IAElEd,SAAS,CAACe,KAAK,CAAC,IAAI,EAAEC,SAAS,CAAC;EAClC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEC,MAAM,EAAE,CAAC;EAET;AACF;AACA;AACA;AACA;AACA;EACEC,UAAU,EAAE,SAASA,UAAUA,CAACL,GAAG,EAAE;IACnC,IAAI,CAACM,MAAM,GAAGZ,QAAQ,CAACA,QAAQ,CAACa,MAAM,CAAC,CAAC,IAAI,CAAC;;IAE7C;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI,CAACD,MAAM,CAACE,IAAI,CAAC,IAAI,CAACD,MAAM,CAACE,WAAW,EAAE,EAAET,GAAG,EAAE,IAAI,CAAC;;IAEtD;IACA;IACA;IACAN,QAAQ,CAACgB,MAAM,CAAC,IAAI,CAACC,EAAE,CAAC,GAAG,IAAI;EACjC,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEH,IAAI,EAAE,SAASA,IAAIA,CAAA,EAAG;IACpB,IAAII,IAAI;MACJC,KAAK,GAAG,IAAI;MACZC,QAAQ,GAAG,IAAI;MACfR,MAAM,GAAGQ,QAAQ,CAACR,MAAM;IAE5BQ,QAAQ,CAACC,EAAE,CAAC,QAAQ,EAAE,SAASC,MAAMA,CAACC,IAAI,EAAE;MAC1C,IAAI,CAACJ,KAAK,EAAE;QACV,OAAOC,QAAQ,CAACI,IAAI,CAAC,MAAM,EAAED,IAAI,CAAC;MACpC;;MAEA;MACA;MACA;MACA;MACA;MACA,IAAIE,KAAK,GAAGF,IAAI,CAACJ,KAAK,CAACC,QAAQ,CAACV,MAAM,CAAC;MACvCU,QAAQ,CAACV,MAAM,GAAGa,IAAI,CAACG,MAAM;MAE7BN,QAAQ,CAACI,IAAI,CAAC,MAAM,EAAEC,KAAK,CAAC;IAC9B,CAAC,CAAC;IAEFL,QAAQ,CAACC,EAAE,CAAC,KAAK,EAAE,SAASM,OAAOA,CAAA,EAAG;MACpC,OAAO3B,QAAQ,CAACgB,MAAM,CAACI,QAAQ,CAACH,EAAE,CAAC;IACrC,CAAC,CAAC;IAEF,IAAI,IAAI,CAACW,OAAO,EAAE;MAChBhB,MAAM,CAACgB,OAAO,GAAG,CAAC,IAAI,CAACA,OAAO;IAChC;IAEA,IAAI,MAAM,KAAK,IAAI,CAACC,IAAI,CAACC,WAAW,EAAE,IAAI,iBAAiB,IAAIlB,MAAM,EAAE;MACrEA,MAAM,CAACmB,eAAe,GAAG,IAAI;IAC/B;;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,KAAKb,IAAI,IAAI,IAAI,CAACc,OAAO,EAAE;MACzB,IAAI,IAAI,CAACA,OAAO,CAACd,IAAI,CAAC,KAAKe,SAAS,IAAI,IAAI,CAACrB,MAAM,CAACsB,gBAAgB,EAAE;QACpE,IAAI,CAACtB,MAAM,CAACsB,gBAAgB,CAAChB,IAAI,EAAE,IAAI,CAACc,OAAO,CAACd,IAAI,CAAC,GAAE,EAAE,CAAC;MAC5D;IACF;;IAEA;IACA;IACA;IACA,IAAIE,QAAQ,CAACe,SAAS,EAAE;MACtB,IAAI,CAAC,IAAI,CAACC,IAAI,IAAI,QAAQ,KAAK,OAAO,IAAI,CAACA,IAAI,EAAE;QAC/C,IAAI,WAAW,IAAIxB,MAAM,EAAE;UACzBA,MAAM,CAACyB,SAAS,GAAG,IAAI;UACvBlB,KAAK,GAAG,KAAK;QACf,CAAC,MAAM,IAAInB,QAAQ,CAACsC,IAAI,CAACC,cAAc,EAAE;UACvC3B,MAAM,CAAC4B,YAAY,GAAG,kBAAkB;UACxCrB,KAAK,GAAG,KAAK;QACf;MACF,CAAC,MAAM;QACL,IAAInB,QAAQ,CAACsC,IAAI,CAACG,qBAAqB,EAAE;UACvC7B,MAAM,CAAC4B,YAAY,GAAG,yBAAyB;QACjD,CAAC,MAAM,IAAIxC,QAAQ,CAACsC,IAAI,CAACI,QAAQ,EAAE;UACjC9B,MAAM,CAAC4B,YAAY,GAAG,WAAW;QACnC;MACF;IACF;IAEA7C,SAAS,CAACiB,MAAM,EAAEQ,QAAQ,EAAEA,QAAQ,CAACe,SAAS,CAAC;IAC/Cf,QAAQ,CAACI,IAAI,CAAC,QAAQ,EAAEZ,MAAM,CAAC;IAE/BhB,IAAI,CAACgB,MAAM,EAAE,IAAI,CAACwB,IAAI,EAAEvC,IAAI,CAAC,SAASD,IAAIA,CAAC+C,GAAG,EAAE;MAC9C,IAAIA,GAAG,EAAE;QACPvB,QAAQ,CAACI,IAAI,CAAC,OAAO,EAAEmB,GAAG,CAAC;QAC3BvB,QAAQ,CAACI,IAAI,CAAC,KAAK,EAAEmB,GAAG,CAAC;MAC3B;MAEAvB,QAAQ,CAACI,IAAI,CAAC,MAAM,CAAC;IACvB,CAAC,CAAC,CAAC;EACL,CAAC;EAED;AACF;AACA;AACA;AACA;AACA;EACEoB,OAAO,EAAE,SAASA,OAAOA,CAAA,EAAG;IAC1B,IAAI,CAAC,IAAI,CAAChC,MAAM,EAAE,OAAO,KAAK;IAE9B,IAAI,CAACY,IAAI,CAAC,SAAS,CAAC;IAEpB,IAAI,CAACZ,MAAM,CAACiC,KAAK,EAAE;IACnB,IAAI,CAACC,kBAAkB,EAAE;IAEzB,IAAI,CAACd,OAAO,GAAG,CAAC,CAAC;IACjB,IAAI,CAACpB,MAAM,GAAG,IAAI;IAClB,IAAI,CAACwB,IAAI,GAAG,IAAI;IAEhB,OAAOpC,QAAQ,CAACgB,MAAM,CAAC,IAAI,CAACC,EAAE,CAAC;IAE/B,OAAO,IAAI;EACb;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA;AACA;AACA;AACAjB,QAAQ,CAAC+C,GAAG,GAAG,SAASC,MAAMA,CAAA,EAAG;EAC/B,IAAI;IAAE,OAAO,IAAIjD,cAAc,EAAE;EAAE,CAAC,CACpC,OAAOkD,CAAC,EAAE,CAAC;AACb,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAjD,QAAQ,CAACF,GAAG,GAAG,SAASkD,MAAMA,CAAA,EAAG;EAC/B,IAAIE,GAAG,GAAG,CAAC,oBAAoB,EAAE,oBAAoB,EAAE,mBAAmB,CAAC;IACvEjC,EAAE;EAEN,OAAOiC,GAAG,CAACxB,MAAM,EAAE;IACjBT,EAAE,GAAGiC,GAAG,CAACC,KAAK,EAAE;IAEhB,IAAI;MAAE,OAAO,IAAIrD,GAAG,CAACmB,EAAE,CAAC;IAAE,CAAC,CAC3B,OAAOgC,CAAC,EAAE,CAAC;EACb;AACF,CAAC;;AAED;AACA;AACA;AACA;AACA;AACA;AACAjD,QAAQ,CAACgB,MAAM,GAAG,CAAC,CAAC;;AAEpB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACAhB,QAAQ,CAACa,MAAM,GAAG,CAAC,CAACb,QAAQ,CAAC+C,GAAG,EAAE,GAAG,KAAK,GAAI,CAAC,CAAC/C,QAAQ,CAACF,GAAG,EAAE,GAAG,KAAK,GAAG,EAAG;;AAE5E;AACA;AACA;AACA;AACA;AACA;AACAE,QAAQ,CAACoD,SAAS,GAAG,CAAC,CAACpD,QAAQ,CAACa,MAAM;;AAEtC;AACA;AACA;AACA;AACA;AACA;AACA;AACAb,QAAQ,CAACsC,IAAI,GAAG,KAAK,KAAKtC,QAAQ,CAACa,MAAM,GAAI,SAASwC,MAAMA,CAAA,EAAG;EAC7D,IAAIC,KAAK,GAAG,iGAAiG,CAACC,KAAK,CAAC,GAAG,CAAC;IACpHH,SAAS,GAAG,CAAC,CAAC;IACdd,IAAI;IAAEkB,GAAG;IAAEC,IAAI;EAEnB,OAAOH,KAAK,CAAC5B,MAAM,EAAE;IACnBY,IAAI,GAAGgB,KAAK,CAACI,GAAG,EAAE;IAClBD,IAAI,GAAGnB,IAAI,CAACqB,OAAO,CAAC,IAAI,EAAE,EAAE,CAAC;IAC7BH,GAAG,GAAGxD,QAAQ,CAAC+C,GAAG,EAAE;;IAEpB;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA,IAAI;MACF;MACAS,GAAG,CAAC1C,IAAI,CAAC,KAAK,EAAE,GAAG,EAAE,IAAI,CAAC;IAC5B,CAAC,CAAC,OAAOmC,CAAC,EAAE;MACV;MACA;MACA,IAAI;QACFO,GAAG,CAAC1C,IAAI,CAAC,KAAK,EAAE,mBAAmB,EAAE,IAAI,CAAC;MAC5C,CAAC,CAAC,OAAO6B,GAAG,EAAE;QACZS,SAAS,CAACK,IAAI,CAAC,GAAG,KAAK;QACvB;MACF;IACF;IAEA,IAAI;MACFD,GAAG,CAAChB,YAAY,GAAGF,IAAI;MACvBc,SAAS,CAACK,IAAI,CAAC,GAAG,UAAU,IAAID,GAAG,IAAIA,GAAG,CAAChB,YAAY,KAAKF,IAAI;IAClE,CAAC,CAAC,OAAOW,CAAC,EAAE;MACVG,SAAS,CAACK,IAAI,CAAC,GAAG,KAAK;IACzB;IAEAD,GAAG,GAAG,IAAI;EACZ;EAEA,OAAOJ,SAAS;AAClB,CAAC,EAAE,GAAI,CAAC,CAAC;;AAET;AACA;AACA;AACA;AACA;AACA;AACApD,QAAQ,CAACmC,SAAS,GAAG,KAAK,KAAKnC,QAAQ,CAACa,MAAM,KACzC,WAAW,IAAId,cAAc,CAAC6D,SAAS,IACvC5D,QAAQ,CAACsC,IAAI,CAACG,qBAAqB,IACnCzC,QAAQ,CAACsC,IAAI,CAACC,cAAc,IAC5BvC,QAAQ,CAACsC,IAAI,CAACI,QAAQ,IACtB1C,QAAQ,CAACsC,IAAI,CAACuB,OAAO,CACzB;;AAED;AACA;AACA;AACA;AACA;AACA;AACA,IAAIC,MAAM,CAACC,WAAW,EAAED,MAAM,CAACC,WAAW,CAAC,UAAU,EAAE,SAASC,IAAIA,CAAA,EAAG;EACrE,KAAK,IAAI/C,EAAE,IAAIjB,QAAQ,CAACgB,MAAM,EAAE;IAC9BhB,QAAQ,CAACgB,MAAM,CAACC,EAAE,CAAC,CAAC2B,OAAO,EAAE;EAC/B;AACF,CAAC,CAAC;;AAEF;AACA;AACA;AACA3C,MAAM,CAACC,OAAO,GAAGF,QAAQ"},"metadata":{},"sourceType":"script","externalDependencies":[]}